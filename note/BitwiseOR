按位或（位运算符 `|`）是一种二进制位操作，在计算机编程中用于对两个数字的每一位进行逻辑或运算。它的工作原理如下：

- **运算规则**：  
  每一位的按位或规则是：
  - 如果任一对应位为 `1`，结果为 `1`。
  - 如果两个对应位都为 `0`，结果为 `0`。

### 示例
假设有两个数字 `a` 和 `b`，分别为 5 和 3，用二进制表示如下：

a = 5   ->  0101 (二进制)
b = 3   ->  0011 (二进制)


按位或运算：

0101
| 0011
------
  0111  ->  7 (十进制)


### 常见用法
1. **设置位**：
   - 通过按位或运算，可以设置某些位为 `1`，而不影响其他位。例如：
     
     int flags = 0b0100;  // 初始值
     flags = flags | 0b0010;  // 设置第 1 位
     System.out.println(Integer.toBinaryString(flags));  // 输出：0110
     

2. **位掩码**：
   - 配合位掩码（mask）使用，可以操作特定位。例如：
     
     int value = 0b1100;
     int mask = 0b0010; // 只设置第 1 位
     int result = value | mask;
     System.out.println(Integer.toBinaryString(result));  // 输出：1110
     
