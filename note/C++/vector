`std::vector` 是 C++ 标准模板库（STL）中最常用的容器之一。它提供了许多方法和操作，用于动态数组的管理和操作。以下是 `std::vector` 的一些常用方法及其功能说明：

---

### **1. 构造函数**
- **`vector<T>()`**: 默认构造函数，创建一个空的 `vector`。
- **`vector<T>(size_t n)`**: 创建一个大小为 `n` 的 `vector`，元素初始化为默认值（例如 `0` 或 `T()`）。
- **`vector<T>(size_t n, const T& value)`**: 创建一个大小为 `n` 的 `vector`，所有元素初始化为 `value`。
- **`vector<T>(initializer_list<T> il)`**: 使用初始化列表创建 `vector`，例如 `vector<int> v = {1, 2, 3}`。
- **`vector<T>(const vector<T>& other)`**: 拷贝构造函数。
- **`vector<T>(vector<T>&& other)`**: 移动构造函数。

---

### **2. 大小相关方法**
- **`size()`**: 返回当前 `vector` 中的元素个数。
- **`capacity()`**: 返回当前 `vector` 的容量（即分配的内存大小）。
- **`resize(size_t n)`**: 改变 `vector` 的大小。如果新大小大于当前大小，用默认值填充。
- **`empty()`**: 判断 `vector` 是否为空。
- **`shrink_to_fit()`**: 将 `vector` 的容量调整为与实际大小相等，释放多余的内存。
- **`max_size()`**: 返回 `vector` 能存储的最大元素数量。

---

### **3. 元素访问**
- **`operator[]`**: 通过索引访问元素，例如 `v[0]`。
- **`at(size_t index)`**: 通过索引访问元素，带边界检查，越界时抛出异常。
- **`front()`**: 返回第一个元素。
- **`back()`**: 返回最后一个元素。
- **`data()`**: 返回底层数组的指针。

---

### **4. 修改容器的方法**
- **`push_back(const T& value)`**: 在 `vector` 的末尾添加一个元素。
- **`push_back(T&& value)`**: 在末尾添加一个右值引用的元素（移动语义）。
- **`pop_back()`**: 删除 `vector` 的最后一个元素。
- **`insert(iterator pos, const T& value)`**: 在指定位置插入一个元素。
- **`insert(iterator pos, size_t n, const T& value)`**: 在指定位置插入 `n` 个相同的元素。
- **`erase(iterator pos)`**: 删除指定位置的元素。
- **`erase(iterator first, iterator last)`**: 删除指定范围内的元素。
- **`clear()`**: 删除所有元素，将 `vector` 清空。
- **`emplace_back(args...)`**: 在末尾直接构造一个元素（避免拷贝）。
- **`emplace(iterator pos, args...)`**: 在指定位置直接构造一个元素。
- **`swap(vector<T>& other)`**: 交换两个 `vector` 的内容。

---

### **5. 迭代器相关方法**
- **`begin()`**: 返回指向第一个元素的迭代器。
- **`end()`**: 返回指向最后一个元素之后的迭代器。
- **`rbegin()`**: 返回指向最后一个元素的反向迭代器。
- **`rend()`**: 返回指向第一个元素之前的反向迭代器。
- **`cbegin()`**: 返回指向第一个元素的常量迭代器。
- **`cend()`**: 返回指向最后一个元素之后的常量迭代器。
- **`crbegin()`**: 返回指向最后一个元素的常量反向迭代器。
- **`crend()`**: 返回指向第一个元素之前的常量反向迭代器。

---

### **6. 容量管理**
- **`reserve(size_t n)`**: 预留至少 `n` 个元素的空间，避免多次重新分配内存。
- **`capacity()`**: 返回当前分配的容量。
- **`shrink_to_fit()`**: 将多余的容量释放，使容量与实际大小一致。

---

### **7. 比较操作**
- **`operator==`**: 判断两个 `vector` 是否相等。
- **`operator!=`**: 判断两个 `vector` 是否不相等。
- **`operator<, operator<=, operator>, operator>=`**: 按字典顺序比较两个 `vector`。

---
