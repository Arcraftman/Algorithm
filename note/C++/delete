在 C++ 中，`delete` 是用于释放动态分配的内存的关键字。它通常与 `new` 配对使用，用于管理堆内存。以下是 `delete` 的用法和注意事项：

---

### **1. `delete` 的基本用法**
`delete` 用于释放通过 `new` 分配的单个对象的内存。

#### **语法**

delete pointer;


#### **示例**

int* ptr = new int(10);  // 动态分配一个整数
std::cout << *ptr << std::endl;  // 输出 10
delete ptr;  // 释放内存


---

### **2. `delete[]` 的用法**
`delete[]` 用于释放通过 `new[]` 分配的数组的内存。

#### **语法**

delete[] arrayPointer;


#### **示例**

int* arr = new int[5];  // 动态分配一个包含 5 个整数的数组
for (int i = 0; i < 5; ++i) {
    arr[i] = i + 1;
}
delete[] arr;  // 释放数组内存


---

### **3. `delete` 的注意事项**

#### **(1) 只能释放通过 `new` 分配的内存**
`delete` 只能用于释放通过 `new` 或 `new[]` 分配的内存。如果尝试释放栈内存或未分配的内存，会导致未定义行为。


int x = 10;
int* ptr = &x;
delete ptr;  // 错误：ptr 指向栈内存，不能使用 delete


#### **(2) 不能重复释放同一块内存**
重复释放同一块内存会导致未定义行为。


int* ptr = new int(10);
delete ptr;
delete ptr;  // 错误：ptr 已经被释放


#### **(3) 释放后应将指针置为 `nullptr`**
释放内存后，建议将指针置为 `nullptr`，以避免悬空指针（Dangling Pointer）问题。


int* ptr = new int(10);
delete ptr;
ptr = nullptr;  // 避免悬空指针


#### **(4) 不要忘记释放内存**
如果忘记释放动态分配的内存，会导致内存泄漏。


void memoryLeak() {
    int* ptr = new int(10);
    // 忘记调用 delete ptr;
}


---

### **4. `delete` 与析构函数**
当使用 `delete` 释放对象时，会调用该对象的析构函数。

#### **示例**

class MyClass {
public:
    MyClass() {
        std::cout << "Constructor called!" << std::endl;
    }
    ~MyClass() {
        std::cout << "Destructor called!" << std::endl;
    }
};

int main() {
    MyClass* obj = new MyClass();  // 调用构造函数
    delete obj;  // 调用析构函数
    return 0;
}


输出：

Constructor called!
Destructor called!


---

### **5. `delete` 与数组**
当释放动态分配的数组时，必须使用 `delete[]`，否则会导致未定义行为。

#### **示例**

class MyClass {
public:
    MyClass() {
        std::cout << "Constructor called!" << std::endl;
    }
    ~MyClass() {
        std::cout << "Destructor called!" << std::endl;
    }
};

int main() {
    MyClass* arr = new MyClass[3];  // 调用 3 次构造函数
    delete[] arr;  // 调用 3 次析构函数
    return 0;
}


输出：

Constructor called!
Constructor called!
Constructor called!
Destructor called!
Destructor called!
Destructor called!


---

### **6. 智能指针替代 `delete`**
在现代 C++ 中，推荐使用智能指针（如 `std::unique_ptr` 和 `std::shared_ptr`）来管理动态内存，避免手动调用 `delete`。

#### **示例：`std::unique_ptr`**

#include <memory>

int main() {
    std::unique_ptr<int> ptr = std::make_unique<int>(10);
    std::cout << *ptr << std::endl;  // 输出 10
    // 不需要手动调用 delete，内存会自动释放
    return 0;
}


#### **示例：`std::shared_ptr`**

#include <memory>

int main() {
    std::shared_ptr<int> ptr = std::make_shared<int>(10);
    std::cout << *ptr << std::endl;  // 输出 10
    // 不需要手动调用 delete，内存会自动释放
    return 0;
}


---

### **7. 总结**
- `delete` 用于释放通过 `new` 分配的单个对象的内存。
- `delete[]` 用于释放通过 `new[]` 分配的数组的内存。
- 使用 `delete` 时需要注意：
  - 只能释放通过 `new` 分配的内存。
  - 不能重复释放同一块内存。
  - 释放后应将指针置为 `nullptr`。
  - 不要忘记释放内存，否则会导致内存泄漏。
- 现代 C++ 推荐使用智能指针（如 `std::unique_ptr` 和 `std::shared_ptr`）来避免手动管理内存。

如果有其他问题，欢迎继续提问！
