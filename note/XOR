### **XOR（异或运算）详解**

#### **XOR 是什么？**
XOR，全称 **exclusive OR**（异或），是位运算和逻辑运算中常见的一种操作。它的核心规则是：  
- **两个输入不同，输出为 1；两个输入相同，输出为 0**。

---

### **XOR 的真值表**
| A | B | A ^ B |
|---|---|-------|
| 0 | 0 |   0   |
| 0 | 1 |   1   |
| 1 | 0 |   1   |
| 1 | 1 |   0   |

---

### **XOR 的特点**
1. **对称性**  
   - `A ^ B` 等于 `B ^ A`，运算具有交换律。
2. **结合性**  
   - `(A ^ B) ^ C` 等于 `A ^ (B ^ C)`，运算具有结合律。
3. **自反性**  
   - `A ^ A = 0`，任何数和自己异或都等于 0。
4. **与 0 异或的结果**  
   - `A ^ 0 = A`，任何数和 0 异或，结果是它本身。

---

### **XOR 在位运算中的作用**

#### **1. 位翻转**
- `x ^ 1` 可以翻转某个位（0 变 1，1 变 0）。
- `x ^ 0` 保持该位不变。

**例子：**

int x = 5;  // 二进制为 0101
int result = x ^ 1;  // 对最低位翻转，结果为 0100，即 4
System.out.println(result);


---

#### **2. 无需临时变量的数值交换**
使用 XOR，可以在不借助临时变量的情况下交换两个变量的值。

**实现：**

int a = 5;  // 二进制：0101
int b = 3;  // 二进制：0011

a = a ^ b;  // a = 0101 ^ 0011 = 0110 (6)
b = a ^ b;  // b = 0110 ^ 0011 = 0101 (5)
a = a ^ b;  // a = 0110 ^ 0101 = 0011 (3)

System.out.println("a = " + a);  // 输出 3
System.out.println("b = " + b);  // 输出 5


---

#### **3. 检测两个数是否相等**
利用 `A ^ B = 0` 的性质，判断两个数是否相等。

**例子：**

int a = 5;
int b = 5;

if ((a ^ b) == 0) {
    System.out.println("a 和 b 相等");
} else {
    System.out.println("a 和 b 不相等");
}


---

#### **4. 数组中唯一数字问题**
在一个数组中，只有一个数字出现一次，其他数字都出现两次。利用 XOR 可以高效找到这个唯一的数字。

**原理：**
- 如果一个数与自己异或，结果是 0。
- 数组中所有数字异或后，最终结果是只出现一次的数字。

**代码：**

int[] nums = {2, 3, 2, 4, 4};
int result = 0;

for (int num : nums) {
    result ^= num;
}

System.out.println("唯一的数字是：" + result);  // 输出 3


---

### **XOR 在逻辑运算中的应用**

#### **逻辑异或**
在布尔逻辑中，`A ^ B` 表示两个值不同则为 `true`，相同则为 `false`。

**逻辑真值表：**
| A (布尔) | B (布尔) | A ^ B (布尔) |
|----------|----------|--------------|
| false    | false    | false        |
| false    | true     | true         |
| true     | false    | true         |
| true     | true     | false        |

#### **示例代码：**

boolean a = true;
boolean b = false;

System.out.println(a ^ b);  // true，因为 a 和 b 不同
System.out.println(a ^ a);  // false，因为 a 和 a 相同


---

### **XOR 的数学性质**
1. **交换律**  
   \( A \oplus B = B \oplus A \)

2. **结合律**  
   \( (A \oplus B) \oplus C = A \oplus (B \oplus C) \)

3. **恒等性**  
   \( A \oplus 0 = A \)

4. **反转性**  
   \( A \oplus A = 0 \)

5. **自消性**  
   \( A \oplus B \oplus B = A \)

---

### **XOR 的实际应用场景**
1. **加密与解密**
   - XOR 是简单加密算法中的核心操作。
   - 加密：`cipher = plaintext ^ key`
   - 解密：`plaintext = cipher ^ key`

   **例子：**
   
   int plaintext = 42;  // 原始数据
   int key = 123;       // 密钥

   int cipher = plaintext ^ key;  // 加密
   System.out.println("加密后的数据：" + cipher);

   int decrypted = cipher ^ key;  // 解密
   System.out.println("解密后的数据：" + decrypted);
   

2. **位级别的数据处理**
   - 翻转特定位。
   - 清零和检查位。

3. **算法优化**
   - 在数组和集合中高效查找唯一值。

