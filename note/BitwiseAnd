### **按位与运算（Bitwise AND）详细讲解**

按位与是一种二进制运算，符号为 `&`。它是对两个整数的二进制位逐位进行与运算的操作。以下是从基础到应用的全面解析：

---

### **按位与的规则**
按位与操作需要两个整数的二进制表示进行逐位比较。每一位的运算规则如下：

| 位1 (A) | 位2 (B) | 结果 (A & B) |
|:-------:|:-------:|:-----------:|
|    0    |    0    |      0      |
|    0    |    1    |      0      |
|    1    |    0    |      0      |
|    1    |    1    |      1      |

---

### **按位与的核心特点**
1. **只要有一位是 `0`，结果就是 `0`**：只有当两个对应位都是 `1` 时，结果才是 `1`。
2. **运算是逐位的**：从二进制表示的最低位开始，一直到最高位，逐位执行上述规则。
3. **结果长度等于参与运算的数字的最大二进制长度**。

---

### **举例解析**
假设有两个整数 `A = 5` 和 `B = 3`：
- `A = 5` 的二进制表示为 `00000101`  
- `B = 3` 的二进制表示为 `00000011`

将它们逐位进行按位与运算：
```
   00000101   (A = 5)
&  00000011   (B = 3)
-------------
   00000001   (结果 = 1)
```

因此，`5 & 3 = 1`。

---

### **按位与在代码中的作用**
在编程中，按位与常用于以下几种场景：

#### **1. 提取某一位的值**
对于任意整数 `x`，`x & 1` 可以用来判断最低位是 `0` 还是 `1`：
- 如果 `x & 1 = 0`，说明最低位是 `0`，该数是偶数。
- 如果 `x & 1 = 1`，说明最低位是 `1`，该数是奇数。

##### **示例**
假设 `x = 6`（`110`）：
- `x & 1 = 110 & 001 = 000`，结果为 `0`，说明 `6` 是偶数。

假设 `x = 5`（`101`）：
- `x & 1 = 101 & 001 = 001`，结果为 `1`，说明 `5` 是奇数。

##### **应用**
这种特性广泛应用于**奇偶判断**或**位操作的基础逻辑**。

---

#### **2. 清零某些位**
通过与一个特定的掩码（mask）进行按位与，可以将某些位清零，而保留其他位不变。

##### **示例**
假设 `x = 13`（`1101`），我们希望将它的最低两位清零，可以用掩码 `~3`（即 `1111...1100`）：
```
   00001101   (x = 13)
&  11111100   (~3)
-------------
   00001100   (结果 = 12)
```

##### **作用**
这种操作在**嵌入式系统**或**硬件驱动**中非常常见，用于对位进行精确的控制。

---

#### **3. 判断某些位是否为 1**
通过与某个掩码进行按位与，可以检查数字的某些特定位是否为 `1`。

##### **示例**
假设 `x = 13`（`1101`），我们想检查倒数第二位是否为 `1`，可以用掩码 `2`（`0010`）：
```
   00001101   (x = 13)
&  00000010   (掩码 = 2)
-------------
   00000000   (结果 = 0，表示倒数第二位不是 1)
```

##### **应用**
这种操作在**标志位检测**中十分常见，比如检查权限标志、状态标志等。

---

#### **4. 转换为二进制表示**
在你的代码中：
```java
s.append(x & 1);
```
这里的 `x & 1` 用于提取整数的二进制最低位，逐步生成该整数的完整二进制字符串。

##### **示例**
以 `x = 5`（`101`）为例：
1. 初始：`x = 5`，最低位 `x & 1 = 1`，加入到字符串中。
2. 右移一位：`x >>= 1`，`x = 2`（`10`），最低位 `x & 1 = 0`。
3. 右移一位：`x >>= 1`，`x = 1`（`1`），最低位 `x & 1 = 1`。
4. 最终得到 `101`。

---

### **总结**
- `x & 1` 是按位与操作的一个特例，用于提取整数的最低位。
- 按位与操作广泛用于**位提取**、**位清零**、**位检测**以及**位控制**等场景。
- 在你的代码中，`x & 1` 提取二进制最低位，通过循环实现完整的二进制转换。
